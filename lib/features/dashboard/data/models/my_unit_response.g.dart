// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'my_unit_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

MyUnitResponse _$MyUnitResponseFromJson(Map<String, dynamic> json) =>
    MyUnitResponse(
      androidLocationTrackingLoopType:
          json['android_location_tracking_loop_type'] as String?,
      upcomingEvents: json['upcoming_events'] as bool?,
      outOfRangePunchInRestrictionMsg:
          json['out_of_range_punch_in_restriction_msg'] as String?,
      outOfRangePunchOutRestrictionMsg:
          json['out_of_range_punch_out_restriction_msg'] as String?,
      todayBirthDays: (json['today_birth_days'] as List<dynamic>?)
          ?.map((e) => TodayBirthDay.fromJson(e as Map<String, dynamic>))
          .toList(),
      managerLevelVisits: json['manager_level_visits'] as String?,
      expireMsg: json['expire_msg'] as String?,
      isPlanExpired: json['is_plan_expired'] as bool?,
      wfhApplyType: json['wfh_apply_type'] as String?,
      restrictUserProfile: json['restrict_user_profile'] as bool?,
      allowZeroProductPriceOrder:
          json['allow_zero_product_price_order'] as bool?,
      customerVisibility: json['customer_visibility'] as bool?,
      calculateVisitDistance: json['calculate_visit_distance'] as bool?,
      distanceCalculatingType: json['distance_calculating_type'] as String?,
      retailerProductView: json['retailer_product_view'] as String?,
      retailerPhotoRequired: json['retailer_photo_required'] as bool?,
      endVisitAttachment: json['end_visit_attachment'] as String?,
      onBackEndVisitRequired: json['on_back_end_visit_required'] as bool?,
      hideDistributorSelection: json['hide_distributor_selection'] as bool?,
      onlyAutoApprovedAttendance:
          json['only_auto_approved_attendance'] as bool?,
      takeEndVisitReason: json['take_end_visit_reason'] as bool?,
      manageOrderStock: json['manage_order_stock'] as bool?,
      isFinanceYear: json['is_finance_year'] as bool?,
      appUpdateDailogType: json['app_update_dailog_type'] as String?,
      multipleCompanyLogin: json['multiple_company_login'] as bool?,
      orderWithoutPunchIn: json['order_without_punch_in'] as bool?,
      locationLogEveryMinute: json['location_log_every_minute'] as String?,
      shareOrderAccess: json['share_order_access'] as bool?,
      cancelOrderAfterConfirm: json['cancel_order_after_confirm'] as bool?,
      workReportOn: json['work_report_on'] as bool?,
      takeProductPriceFromUser: json['take_product_price_from_user'] as bool?,
      attendanceType: json['attendance_type'] as String?,
      takeAttendanceSelfie: json['take_attendance_selfie'] as String?,
      hideTimeline: json['hide_timeline'] as bool?,
      hideChat: json['hide_chat'] as bool?,
      hideMyactivity: json['hide_myactivity'] as bool?,
      vpnCheck: json['VPNCheck'] as bool?,
      socieatyLogo: json['socieaty_logo'] as String?,
      downloadUrlTrackingApp: json['download_url_tracking_app'] as String?,
      trackingAppVersionAndroid:
          json['tracking_app_version_android'] as String?,
      hideAttendanceFaceMenu: json['hide_attendance_face_menu'] as bool?,
      hideBirthdayView: json['hide_birthday_view'] as bool?,
      hideDepartmentEmployeeView:
          json['hide_department_employee_view'] as bool?,
      hideGalleryView: json['hide_gallery_view'] as bool?,
      attendanceWithMatchingFace:
          json['attendance_with_matching_face'] as bool?,
      attendanceWithMatchingFaceIos:
          json['attendance_with_matching_face_ios'] as bool?,
      byPassRouteList: json['by_pass_route_list'] as bool?,
      odometerTracking: json['odometer_tracking'] as bool?,
      hideExpenseTitle: json['hide_expense_title'] as bool?,
      isAmazonFaceMatch: json['is_amazon_face_match'] as bool?,
      startEndVisitWithFaceMatch:
          json['start_end_visit_with_face_match'] as bool?,
      viewSalaryDaysMonthAttendance:
          json['view_salary_days_month_attendance'] as bool?,
      restrictDownloading: json['restrict_downloading'] as bool?,
      restrictScreenshot: json['restrict_screenshot'] as bool?,
      visitAddExpenseButtonVisibility:
          json['visit_add_expense_button_visibility'] as bool?,
      dobOnboardingRequired: json['dob_onboarding_required'] as bool?,
      resignationDateRequiredMarkExEmployee:
          json['resignation_date_required_mark_ex_employee'] as bool?,
      autoVisitStartEndDefaultTime:
          json['auto_visit_start_end_default_time'] as String?,
      employeeIdGenerate: json['employee_id_generate'] as bool?,
      employeeIdRequired: json['employee_id_required'] as bool?,
      employeeMultipleRetailerBinding:
          json['employee_multiple_retailer_binding'] as String?,
      reminder: json['reminder'] as List<dynamic>?,
      logoutIosDevice: json['logoutIosDevice'] as bool?,
      userId: json['user_id'] as String?,
      allowToPreApplyShortLeave:
          json['allow_to_pre_apply_short_leave'] as bool?,
      linkPunchInWithVisitStart:
          json['link_punch_in_with_visit_start'] as bool?,
      visitAutoStartEndInRange: json['visit_auto_start_end_in_range'] as bool?,
      taskAssignToOtherEmployeeAccess:
          json['task_assign_to_other_employee_access'] as bool?,
      shiftData: json['shift_data'] as List<dynamic>?,
      isExpenseOn: json['is_expense_on'] as bool?,
      changeFace: json['changeFace'] as bool?,
      takeAccessibilityPermission:
          json['take_accessibility_permission'] as bool?,
      societyId: json['society_id'] as String?,
      stateIdEmployee: json['state_id_employee'] as String?,
      takeAttendanceFrom: json['take_attendance_from'] as String?,
      companyEmployeeId: json['company_employee_id'] as String?,
      shiftTimeId: json['shift_time_id'] as String?,
      userEmploymentType: json['user_employment_type'] as String?,
      userFullName: json['user_full_name'] as String?,
      userFirstName: json['user_first_name'] as String?,
      userLastName: json['user_last_name'] as String?,
      activeStatus: json['active_status'] as String?,
      expenseGradeId: json['expense_grade_id'] as String?,
      userMobile: json['user_mobile'] as String?,
      countryCode: json['country_code'] as String?,
      userEmail: json['user_email'] as String?,
      userIdProof: json['user_id_proof'],
      currentAddressLat: json['current_address_lat'] as String?,
      currentAddressLong: json['current_address_long'] as String?,
      permanentAddressLat: json['permanent_address_lat'] as String?,
      permanentAddressLong: json['permanent_address_long'] as String?,
      lastAddress: json['last_address'] as String?,
      permanentAddress: json['permanent_address'] as String?,
      facultyUsername: json['faculty_username'] as String?,
      facultyPassword: json['faculty_password'] as String?,
      facultyToken: json['faculty_token'] as String?,
      facultyTokenData: json['faculty_token_data'] as String?,
      isAdminAccess: json['is_admin_access'] as String?,
      jobLocationNames: json['job_location_names'] as String?,
      memberAccessDenied: json['member_access_denied'] as bool?,
      expenseGradeAssigned: json['expense_grade_assigned'] as bool?,
      chatAccessDenied: json['chat_access_denied'] as bool?,
      timlineAccessDenied: json['timline_access_denied'] as bool?,
      userVisitingCard: json['user_visiting_card'] as String?,
      userVisitingCardBack: json['user_visiting_card_back'] as String?,
      shortName: json['short_name'] as String?,
      blockId: json['block_id'] as String?,
      blockName: json['block_name'] as String?,
      floorName: json['floor_name'] as String?,
      baseUrl: json['base_url'] as String?,
      floorId: json['floor_id'] as String?,
      unitId: json['unit_id'] as String?,
      zoneId: json['zone_id'] as String?,
      branchType: json['branch_type'] as String?,
      levelId: json['level_id'] as String?,
      workAllocationAddAccess: json['work_allocation_add_access'] as bool?,
      unitStatus: json['unit_status'] as String?,
      userStatus: json['user_status'] as String?,
      memberStatus: json['member_status'] as String?,
      publicMobile: json['public_mobile'] as String?,
      visitorApproved: json['visitor_approved'] as String?,
      memberDateOfBirth: json['member_date_of_birth'] == null
          ? null
          : DateTime.parse(json['member_date_of_birth'] as String),
      weddingAnniversaryDate: json['wedding_anniversary_date'] as String?,
      facebook: json['facebook'] as String?,
      instagram: json['instagram'] as String?,
      linkedin: json['linkedin'] as String?,
      userGeofenceLatitude: json['user_geofence_latitude'] as String?,
      userGeofenceLongitude: json['user_geofence_longitude'] as String?,
      userGeofenceRange: json['user_geofence_range'] as String?,
      trackUserTime: json['track_user_time'] as String?,
      geoFenceInOutNotification:
          json['geo_fence_in_out_notification'] as String?,
      userLocationList: json['user_location_list'] as List<dynamic>?,
      blockGeofenceLatitude: json['block_geofence_latitude'] as String?,
      blockGeofenceLongitude: json['block_geofence_longitude'] as String?,
      blockGeofenceRange: json['block_geofence_range'] as String?,
      allowWfh: json['allow_wfh'] as bool?,
      trackUserLocation: json['track_user_location'] as bool?,
      addAssetsAccess: json['add_assets_access'] as bool?,
      parcelSecurityCheck: json['parcel_security_check'] as String?,
      viewOtherAssets: json['view_other_assets'] as String?,
      addVisitForOther: json['add_visit_for_other'] as bool?,
      designation: json['designation'] as String?,
      accountDeactive: json['account_deactive'] as bool?,
      bloodGroup: json['blood_group'] as String?,
      altMobile: json['alt_mobile'] as String?,
      countryCodeAlt: json['country_code_alt'] as String?,
      userProfilePic: json['user_profile_pic'] as String?,
      gender: json['gender'] as String?,
      sisterCompanyId: json['sister_company_id'] as String?,
      companyName: json['company_name'] as String?,
      companyAddress: json['company_address'] as String?,
      plotLattitude: json['plot_lattitude'] as String?,
      plotLongitude: json['plot_longitude'] as String?,
      companyLogo: json['company_logo'] as String?,
      societyAddress: json['society_address'] as String?,
      societyLatitude: json['society_latitude'] as String?,
      societyLongitude: json['society_longitude'] as String?,
      societyName: json['society_name'] as String?,
      countryId: json['country_id'] as String?,
      stateId: json['state_id'] as String?,
      cityId: json['city_id'] as String?,
      cityName: json['city_name'] as String?,
      currency: json['currency'] as String?,
      apiKey: json['api_key'] as String?,
      isSociety: json['is_society'] as bool?,
      profileProgress: json['profile_progress'] as String?,
      readStatus: json['read_status'] as String?,
      chatStatus: json['chat_status'] as String?,
      visitorOnOff: json['visitor_on_off'] as String?,
      entryAllVisitorGroup: json['entry_all_visitor_group'] as String?,
      groupChatStatus: json['group_chat_status'] as String?,
      screenSortCaptureInTimeline:
          json['screen_sort_capture_in_timeline'] as String?,
      createGroup: json['create_group'] as String?,
      member: (json['member'] as List<dynamic>?)
          ?.map((e) => Member.fromJson(e as Map<String, dynamic>))
          .toList(),
      totalEmployeeDepartment: json['total_employee_department'] as String?,
      myTeam: (json['my_team'] as List<dynamic>?)
          ?.map((e) => MyTeam.fromJson(e as Map<String, dynamic>))
          .toList(),
      eventAlbum: (json['event_album'] as List<dynamic>?)
          ?.map((e) => EventAlbum.fromJson(e as Map<String, dynamic>))
          .toList(),
      unitName: json['unit_name'] as String?,
      message: json['message'] as String?,
      status: json['status'] as String?,
    );

Map<String, dynamic> _$MyUnitResponseToJson(MyUnitResponse instance) =>
    <String, dynamic>{
      'android_location_tracking_loop_type':
          instance.androidLocationTrackingLoopType,
      'upcoming_events': instance.upcomingEvents,
      'out_of_range_punch_in_restriction_msg':
          instance.outOfRangePunchInRestrictionMsg,
      'out_of_range_punch_out_restriction_msg':
          instance.outOfRangePunchOutRestrictionMsg,
      'today_birth_days': instance.todayBirthDays,
      'manager_level_visits': instance.managerLevelVisits,
      'expire_msg': instance.expireMsg,
      'is_plan_expired': instance.isPlanExpired,
      'wfh_apply_type': instance.wfhApplyType,
      'restrict_user_profile': instance.restrictUserProfile,
      'allow_zero_product_price_order': instance.allowZeroProductPriceOrder,
      'customer_visibility': instance.customerVisibility,
      'calculate_visit_distance': instance.calculateVisitDistance,
      'distance_calculating_type': instance.distanceCalculatingType,
      'retailer_product_view': instance.retailerProductView,
      'retailer_photo_required': instance.retailerPhotoRequired,
      'end_visit_attachment': instance.endVisitAttachment,
      'on_back_end_visit_required': instance.onBackEndVisitRequired,
      'hide_distributor_selection': instance.hideDistributorSelection,
      'only_auto_approved_attendance': instance.onlyAutoApprovedAttendance,
      'take_end_visit_reason': instance.takeEndVisitReason,
      'manage_order_stock': instance.manageOrderStock,
      'is_finance_year': instance.isFinanceYear,
      'app_update_dailog_type': instance.appUpdateDailogType,
      'multiple_company_login': instance.multipleCompanyLogin,
      'order_without_punch_in': instance.orderWithoutPunchIn,
      'location_log_every_minute': instance.locationLogEveryMinute,
      'share_order_access': instance.shareOrderAccess,
      'cancel_order_after_confirm': instance.cancelOrderAfterConfirm,
      'work_report_on': instance.workReportOn,
      'take_product_price_from_user': instance.takeProductPriceFromUser,
      'attendance_type': instance.attendanceType,
      'take_attendance_selfie': instance.takeAttendanceSelfie,
      'hide_timeline': instance.hideTimeline,
      'hide_chat': instance.hideChat,
      'hide_myactivity': instance.hideMyactivity,
      'VPNCheck': instance.vpnCheck,
      'socieaty_logo': instance.socieatyLogo,
      'download_url_tracking_app': instance.downloadUrlTrackingApp,
      'tracking_app_version_android': instance.trackingAppVersionAndroid,
      'hide_attendance_face_menu': instance.hideAttendanceFaceMenu,
      'hide_birthday_view': instance.hideBirthdayView,
      'hide_department_employee_view': instance.hideDepartmentEmployeeView,
      'hide_gallery_view': instance.hideGalleryView,
      'attendance_with_matching_face': instance.attendanceWithMatchingFace,
      'attendance_with_matching_face_ios':
          instance.attendanceWithMatchingFaceIos,
      'by_pass_route_list': instance.byPassRouteList,
      'odometer_tracking': instance.odometerTracking,
      'hide_expense_title': instance.hideExpenseTitle,
      'is_amazon_face_match': instance.isAmazonFaceMatch,
      'start_end_visit_with_face_match': instance.startEndVisitWithFaceMatch,
      'view_salary_days_month_attendance':
          instance.viewSalaryDaysMonthAttendance,
      'restrict_downloading': instance.restrictDownloading,
      'restrict_screenshot': instance.restrictScreenshot,
      'visit_add_expense_button_visibility':
          instance.visitAddExpenseButtonVisibility,
      'dob_onboarding_required': instance.dobOnboardingRequired,
      'resignation_date_required_mark_ex_employee':
          instance.resignationDateRequiredMarkExEmployee,
      'auto_visit_start_end_default_time':
          instance.autoVisitStartEndDefaultTime,
      'employee_id_generate': instance.employeeIdGenerate,
      'employee_id_required': instance.employeeIdRequired,
      'employee_multiple_retailer_binding':
          instance.employeeMultipleRetailerBinding,
      'reminder': instance.reminder,
      'logoutIosDevice': instance.logoutIosDevice,
      'user_id': instance.userId,
      'allow_to_pre_apply_short_leave': instance.allowToPreApplyShortLeave,
      'link_punch_in_with_visit_start': instance.linkPunchInWithVisitStart,
      'visit_auto_start_end_in_range': instance.visitAutoStartEndInRange,
      'task_assign_to_other_employee_access':
          instance.taskAssignToOtherEmployeeAccess,
      'shift_data': instance.shiftData,
      'is_expense_on': instance.isExpenseOn,
      'changeFace': instance.changeFace,
      'take_accessibility_permission': instance.takeAccessibilityPermission,
      'society_id': instance.societyId,
      'state_id_employee': instance.stateIdEmployee,
      'take_attendance_from': instance.takeAttendanceFrom,
      'company_employee_id': instance.companyEmployeeId,
      'shift_time_id': instance.shiftTimeId,
      'user_employment_type': instance.userEmploymentType,
      'user_full_name': instance.userFullName,
      'user_first_name': instance.userFirstName,
      'user_last_name': instance.userLastName,
      'active_status': instance.activeStatus,
      'expense_grade_id': instance.expenseGradeId,
      'user_mobile': instance.userMobile,
      'country_code': instance.countryCode,
      'user_email': instance.userEmail,
      'user_id_proof': instance.userIdProof,
      'current_address_lat': instance.currentAddressLat,
      'current_address_long': instance.currentAddressLong,
      'permanent_address_lat': instance.permanentAddressLat,
      'permanent_address_long': instance.permanentAddressLong,
      'last_address': instance.lastAddress,
      'permanent_address': instance.permanentAddress,
      'faculty_username': instance.facultyUsername,
      'faculty_password': instance.facultyPassword,
      'faculty_token': instance.facultyToken,
      'faculty_token_data': instance.facultyTokenData,
      'is_admin_access': instance.isAdminAccess,
      'job_location_names': instance.jobLocationNames,
      'member_access_denied': instance.memberAccessDenied,
      'expense_grade_assigned': instance.expenseGradeAssigned,
      'chat_access_denied': instance.chatAccessDenied,
      'timline_access_denied': instance.timlineAccessDenied,
      'user_visiting_card': instance.userVisitingCard,
      'user_visiting_card_back': instance.userVisitingCardBack,
      'short_name': instance.shortName,
      'block_id': instance.blockId,
      'block_name': instance.blockName,
      'floor_name': instance.floorName,
      'base_url': instance.baseUrl,
      'floor_id': instance.floorId,
      'unit_id': instance.unitId,
      'zone_id': instance.zoneId,
      'branch_type': instance.branchType,
      'level_id': instance.levelId,
      'work_allocation_add_access': instance.workAllocationAddAccess,
      'unit_status': instance.unitStatus,
      'user_status': instance.userStatus,
      'member_status': instance.memberStatus,
      'public_mobile': instance.publicMobile,
      'visitor_approved': instance.visitorApproved,
      'member_date_of_birth': instance.memberDateOfBirth?.toIso8601String(),
      'wedding_anniversary_date': instance.weddingAnniversaryDate,
      'facebook': instance.facebook,
      'instagram': instance.instagram,
      'linkedin': instance.linkedin,
      'user_geofence_latitude': instance.userGeofenceLatitude,
      'user_geofence_longitude': instance.userGeofenceLongitude,
      'user_geofence_range': instance.userGeofenceRange,
      'track_user_time': instance.trackUserTime,
      'geo_fence_in_out_notification': instance.geoFenceInOutNotification,
      'user_location_list': instance.userLocationList,
      'block_geofence_latitude': instance.blockGeofenceLatitude,
      'block_geofence_longitude': instance.blockGeofenceLongitude,
      'block_geofence_range': instance.blockGeofenceRange,
      'allow_wfh': instance.allowWfh,
      'track_user_location': instance.trackUserLocation,
      'add_assets_access': instance.addAssetsAccess,
      'parcel_security_check': instance.parcelSecurityCheck,
      'view_other_assets': instance.viewOtherAssets,
      'add_visit_for_other': instance.addVisitForOther,
      'designation': instance.designation,
      'account_deactive': instance.accountDeactive,
      'blood_group': instance.bloodGroup,
      'alt_mobile': instance.altMobile,
      'country_code_alt': instance.countryCodeAlt,
      'user_profile_pic': instance.userProfilePic,
      'gender': instance.gender,
      'sister_company_id': instance.sisterCompanyId,
      'company_name': instance.companyName,
      'company_address': instance.companyAddress,
      'plot_lattitude': instance.plotLattitude,
      'plot_longitude': instance.plotLongitude,
      'company_logo': instance.companyLogo,
      'society_address': instance.societyAddress,
      'society_latitude': instance.societyLatitude,
      'society_longitude': instance.societyLongitude,
      'society_name': instance.societyName,
      'country_id': instance.countryId,
      'state_id': instance.stateId,
      'city_id': instance.cityId,
      'city_name': instance.cityName,
      'currency': instance.currency,
      'api_key': instance.apiKey,
      'is_society': instance.isSociety,
      'profile_progress': instance.profileProgress,
      'read_status': instance.readStatus,
      'chat_status': instance.chatStatus,
      'visitor_on_off': instance.visitorOnOff,
      'entry_all_visitor_group': instance.entryAllVisitorGroup,
      'group_chat_status': instance.groupChatStatus,
      'screen_sort_capture_in_timeline': instance.screenSortCaptureInTimeline,
      'create_group': instance.createGroup,
      'member': instance.member,
      'total_employee_department': instance.totalEmployeeDepartment,
      'my_team': instance.myTeam,
      'event_album': instance.eventAlbum,
      'unit_name': instance.unitName,
      'message': instance.message,
      'status': instance.status,
    };

EventAlbum _$EventAlbumFromJson(Map<String, dynamic> json) => EventAlbum(
      galleryAlbumId: json['gallery_album_id'] as String?,
      albumTitle: json['album_title'] as String?,
      eventId: json['event_id'] as String?,
      eventDate: json['event_date'] == null
          ? null
          : DateTime.parse(json['event_date'] as String),
      blockId: json['block_id'] as String?,
      floorId: json['floor_id'] as String?,
      uploadDate: json['upload_date'] as String?,
      imageOne: json['image_one'] as String?,
      galleryType: json['gallery_type'] as String?,
    );

Map<String, dynamic> _$EventAlbumToJson(EventAlbum instance) =>
    <String, dynamic>{
      'gallery_album_id': instance.galleryAlbumId,
      'album_title': instance.albumTitle,
      'event_id': instance.eventId,
      'event_date': instance.eventDate?.toIso8601String(),
      'block_id': instance.blockId,
      'floor_id': instance.floorId,
      'upload_date': instance.uploadDate,
      'image_one': instance.imageOne,
      'gallery_type': instance.galleryType,
    };

Member _$MemberFromJson(Map<String, dynamic> json) => Member(
      userId: json['user_id'] as String?,
      userFullName: json['user_full_name'] as String?,
      userFirstName: json['user_first_name'] as String?,
      userLastName: json['user_last_name'] as String?,
      userDesignation: json['user_designation'] as String?,
      shortName: json['short_name'] as String?,
      userProfilePic: json['user_profile_pic'] as String?,
    );

Map<String, dynamic> _$MemberToJson(Member instance) => <String, dynamic>{
      'user_id': instance.userId,
      'user_full_name': instance.userFullName,
      'user_first_name': instance.userFirstName,
      'user_last_name': instance.userLastName,
      'user_designation': instance.userDesignation,
      'short_name': instance.shortName,
      'user_profile_pic': instance.userProfilePic,
    };

MyTeam _$MyTeamFromJson(Map<String, dynamic> json) => MyTeam(
      userId: json['user_id'] as String?,
      levelId: json['level_id'] as String?,
      levelName: json['level_name'] as String?,
      userFullName: json['user_full_name'] as String?,
      shortName: json['short_name'] as String?,
      userDesignation: json['user_designation'] as String?,
      userProfilePic: json['user_profile_pic'] as String?,
      isPresent: json['is_present'] as bool?,
      statusView: json['status_view'] as String?,
      isBreak: json['is_break'] as bool?,
      leaveData: json['leave_data'] as List<dynamic>?,
      isLeaveFull: json['is_leave_full'] as bool?,
      isLeaveHalf: json['is_leave_half'] as bool?,
    );

Map<String, dynamic> _$MyTeamToJson(MyTeam instance) => <String, dynamic>{
      'user_id': instance.userId,
      'level_id': instance.levelId,
      'level_name': instance.levelName,
      'user_full_name': instance.userFullName,
      'short_name': instance.shortName,
      'user_designation': instance.userDesignation,
      'user_profile_pic': instance.userProfilePic,
      'is_present': instance.isPresent,
      'status_view': instance.statusView,
      'is_break': instance.isBreak,
      'leave_data': instance.leaveData,
      'is_leave_full': instance.isLeaveFull,
      'is_leave_half': instance.isLeaveHalf,
    };

TodayBirthDay _$TodayBirthDayFromJson(Map<String, dynamic> json) =>
    TodayBirthDay(
      userId: json['user_id'] as String?,
      userFullName: json['user_full_name'] as String?,
      userDesignation: json['user_designation'] as String?,
      blockName: json['block_name'] as String?,
      floorName: json['floor_name'] as String?,
      wishId: json['wish_id'] as String?,
      wishReply: json['wish_reply'] as String?,
      shortName: json['short_name'] as String?,
      userProfilePic: json['user_profile_pic'] as String?,
      memberDateOfBirth: json['member_date_of_birth'] as String?,
      isBirthDay: json['isBirthDay'] as bool?,
      isAnniversary: json['isAnniversary'] as bool?,
      isWorkAnniversary: json['isWorkAnniversary'] as bool?,
      totalYearView: json['total_year_view'] as String?,
      isToday: json['is_today'] as bool?,
      memberDateOfBirthView: json['member_date_of_birth_view'] as String?,
      joiningDate: json['joining_date'] as String?,
    );

Map<String, dynamic> _$TodayBirthDayToJson(TodayBirthDay instance) =>
    <String, dynamic>{
      'user_id': instance.userId,
      'user_full_name': instance.userFullName,
      'user_designation': instance.userDesignation,
      'block_name': instance.blockName,
      'floor_name': instance.floorName,
      'wish_id': instance.wishId,
      'wish_reply': instance.wishReply,
      'short_name': instance.shortName,
      'user_profile_pic': instance.userProfilePic,
      'member_date_of_birth': instance.memberDateOfBirth,
      'isBirthDay': instance.isBirthDay,
      'isAnniversary': instance.isAnniversary,
      'isWorkAnniversary': instance.isWorkAnniversary,
      'total_year_view': instance.totalYearView,
      'is_today': instance.isToday,
      'member_date_of_birth_view': instance.memberDateOfBirthView,
      'joining_date': instance.joiningDate,
    };
